install.packages("ggplot2")
install.packages("rgl")
install.packages("knitr")
library(ISLR)
data(Wage)
library(caret)
inTrain<-createDataPartition(y=Wage$wage,p=0.7, list =FALSE)
training <- Wage[inTrain,]
testing  <- Wage[-inTrain,]
names(Wage)
inTrain<-createDataPartition(y=Wage$wage,p=0.7, list =FALSE)
Wage<-subset(Wage,select=-c(logwage))
inTrain<-createDataPartition(y=Wage$wage,p=0.7, list =FALSE)
training <- Wage[inTrain,]
testing  <- Wage[-inTrain,]
modFit <- train(wage~.,method='gbm',data=training,verbose=FALSE)
print(modFit)
qplot(predict(modFit,testing),wage,data=testing)
inTrain<-createDataPartition(y=iris$Species,
p=0.7,list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
modlda <- train(Species~.,data = training,method='lda')
modnb <- train(Species~.,data=training,method = 'nb')
modnb <- train(Species~.,data=training,method = 'nb')
plda <- predict(modlda,testing)
pnb<-predict(modnb,testing)
table(plda,pnb)
equalPredictions <- (plda==pnb)
qplot(Petal.Width,Sepal.Width, colour = equalPredictions,
data = testing)
modnb$modelInfo
modnb$finalModel
install.packages("AppliedPredictiveModeling")
install.packages("ElemStatLearn")
install.packages("pgmm")
2002-1997
library(plotly)
x=c(1:100)
y=x^2
plot_ly(x=x,y=y)
plot_ly(x=x,y=y,mode=markers
)
plot_ly(x=x,y=y,mode='markers'
)
?example(ggplotly)
example(ggplotly)
plot_ly(z = volcano, type = "surface")
plot_ly(z = volcano, type = "surface")
p <- ggplot(diamonds, aes(x = price)) +
geom_density(aes(fill = color), alpha = 0.5) +
ggtitle("Kernel Density estimates by group")
p
ggplotly(p)
p
install.packages("swirl")
library(swirl)
swirl()
?swirl()
swirl()
swirl()
install_from_swirl('Getting_and_Cleaning_Data')
swirl()
?read.csv()
mydf<-read.csv(file=path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion('dplyr')
cran<-tbl_df(mydf)
rm('mydf')
?tbl_df
cran
?select
select(cran,ip_id,package,country)
5:20
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(cran,-time)
select(cran,-5:20)
select(cran,-(5:20)
select(cran,-(5:20))
select(cran,-X:size)
select(cran,-(X:size)
)
select(cran,-X:size)
select(cran,-(X:size))
-5:20
-(5:20)
select(cran,-(X:size))
filter(cran,package=='swirl')
filter(cran,r_version=='3.1.1',country=='US')
?Comparison
filter(cran,r_version<='3.0.2',country=='IN')
filter(cran,country=='US|country=='IN')
filter(cran,country=='US'|country=='IN')
filter(cran,size>100500,r_os=='linux-gnu')
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran,!is.na(r_version))
cran2<-select(cran,size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id))
arrange(cran2,package,ip_id)
arrange(cran2,country,desc(r_version),ip_id)
cran3<-select(cran,c(ip_id,package,size))
cran3<-select(cran,ip_id,package,size)
cran3
mutat(cran3,size_mb=size/2^20)
mutate(cran3,size_mb=size/2^20)
mutate(cran3,size_mb=size/2^20,size_gb=size_mb/2^10)
mutate(cran3,correct_size=size+1000)
summarize(cran,avg_bytes)
summarize(cran,avg_bytes=mean(size))
swirl()
install.packages('swirl')
library(swirl)
swirl()
install_from_swirl('Getting_and_Cleaning_Data')
swirl()
Sys.getlocale('LC_TIME')
library(lubridate)
help(package=lubridate)
today()
this_day<-today()
this_day
year(this_day
)
wday(this_day)
wday(this_day,label=TRUE)
this_moment<-now()
this_moment
second(this_moment)
my_date<-ymd('1989-05-17')
my_date
class(my_date)
ymd('1989 May 17')
mdy('1989 May 17')
mdy('March 12, 1975')
mdy('25081958')
mdy(25081958)
dmy(25081958)
dmy(25081985)
ymd('192012')
ymd('1-9-2012')
ymd('1-2-1920')
mdy('1-2-1920')
ymd('1920/1/2')
dt1
ymd_hms(dt1)
hms('03:22:14')
dt2
ymd(dt2)
update(this_moment,hours=8,minutes=34,seconds=55)
this_moment
?update
this_moment<-update(this_moment,hours=hour(now()),minutes=minute(now()),seconds=second(now()))
this_moment
nyc<-now(tzone='America/New_York')
nyv
nyc
depart<-nyc+days(2)
depart
depart<-update(depart,hours=17,minutes = 34)
depart
arrive<-depart+hours(15)+minutes(50)
?with_tz
arrive<-with_tz(arrive,tzone='Asia/Hong_Kong')
arrive
last_time<-mdy('June 17, 2008',tz = 'Singapore')
last_time
?interval
how_long<-interval(last_time,arrive)
as.period(how_long)
stopwatch()
install.packages('shiny')
?gsub
?sapply
?unique
library(data.table)
data("iris")
iris<-data.table(iris)
iris$Sepal.Length
?geom_point
library(ggplot2)
?geom_point
?lubridate
library(lubridate)
year('2001-1-12')
version
version
install.packages(ggplot2)
install.packages(ggplot)
install.packages("ggplot2")
install.packages(lubridate)
install.packages('lubridate')
install.packages('plotly')
install.packages('leaflet')
install.packages('knitr')
install.packages('caret')
install.packages('data.table')
install.packages('gridExtra')
?addCircels
?addCircles
library(leaflet)
?addCircles
install.packages('pacman')
library(pacman)
if (!require("pacman")) install.packages("pacman")
pacman::p_exists(R)
if (!require("pacman")) install.packages("pacman")
pacman::p_exists(R)
pacman::p_load(animation, rgdal, PBSmodelling, onion, mapview)
?rgdal::project
?getS3method
?getMethod
?getS3method
?show<ethods
?showMethods
?getMethod
library(iris)
data("iris")
library(ggplot2)
library(plotly)
g <- ggplot(data= iris,aes(x=Sepal.Width,y=Sepal.Length,colour=as.factor(Species)))+
geom_point()
ggplotly(g)
g <- ggplot(data= iris,aes(x=Sepal.Width,y=Petal.Width,colour=as.factor(Species)))+
geom_point()+ggtitle('Iris Disparity Based on Sepal Characteristics')
ggplotly(g)
g <- ggplot(data= iris,aes(x=Sepal.Width,y=Petal.Width,colour=as.factor(Species)))+
geom_point()+ggtitle('Iris Disparity Based on Sepal Characteristics')+
theme(legend.title = 'Iris Class')
ggplotly(g)
?labs
g1 <- ggplot(data= iris,aes(x=Sepal.Width,y=Sepal.Length,colour=as.factor(Species)))+
geom_point()+ggtitle('Iris Disparity Based on Sepal Characteristics')+
guides(fill=guide_legend(title=NULL))
ggplotly(g1)
g2 <- ggplot(data= iris,aes(x=Petal.Width,y=Petal.Length,colour=as.factor(Species)))+
geom_point()+ggtitle('Iris Disparity Based on Petal Characteristics')+
guides(fill=guide_legend(title=NULL))
ggplotly(g2)
g1 <- ggplot(data= iris,aes(x=Sepal.Width,y=Sepal.Length,colour=Species))+
geom_point()+ggtitle('Iris Disparity Based on Sepal Characteristics')+
guides(fill=guide_legend(title=NULL))
ggplotly(g1)
g2 <- ggplot(data= iris,aes(x=Petal.Width,y=Petal.Length,colour=Species))+
geom_point()+ggtitle('Iris Disparity Based on Petal Characteristics')+
guides(fill=guide_legend(title=NULL))
ggplotly(g2)
g1 <- ggplot(data= iris,aes(x=Sepal.Width,y=Sepal.Length,colour=Species))+
geom_point()+ggtitle('Iris Disparity Based on Sepal Characteristics')+
guides(fill=guide_legend(title=NULL))
ggplotly(g1)
g2 <- ggplot(data= iris,aes(x=Petal.Width,y=Petal.Length,colour=Species))+
geom_point()+ggtitle('Iris Disparity Based on Petal Characteristics')+
guides(fill=guide_legend(title=NULL))
ggplotly(g2)
install.packages("MultinomialCI")
library(parallel)
?`parallel-package`
detectCores()
?varImp
library(caret)
?varImp
library(randomForest)
?varImp
?randomForest::varImp
getAnywhere(importance)
getAnywhere(importance)
importance
getAnywhere(importance)
getAnywhere(importance)
randomForest:::importance()
randomForest:::importance
randomForest:::.importance
getMethod(importance)
method(importance)
getmethod(importance)
getMethod(importance)
getAnywhere(importance)
getAnywhere(importance.default)
methods(randomForest())
methods(randomForest
)
getAnywhere(randomForest)
getAnywhere(hist())
getAnywhere(hist
)
getAnywhere(importance)
?getAnywhere
help importance
getAnywhere('simpleLoess')
getAnywhere('importance')
getFromNamespace(importance)
getFromNamespace('importance','randomForest')
?nb
library(e1071)
?varImp
?chisq.test
version()
version
setwd('/Users/Mikey/Desktop/Kaggle Datasets/Datasets/Fatal Police Shootings')
getwd()
setwd('/Users/Mikey/Documents/ML-Case-Studies/US Police Shooting Fatalities')
dt <- fread('database.csv',sep = ',')
library(ggplot2)
library(data.table)
library(lubridate)
install.packages('lubridate')
setwd('/Users/Mikey/Documents/ML-Case-Studies/US Police Shooting Fatalities')
dt <- fread('database.csv',sep = ',')
library(ggplot2)
library(data.table)
library(lubridate)
install.packages('lubridate')
library(lubridate)
install.packages('lubridate')
install.packages("lubridate")
install.packages("lubridate")
