geom_density(aes(fill = color), alpha = 0.5) +
ggtitle("Kernel Density estimates by group")
p
ggplotly(p)
p
install.packages("swirl")
library(swirl)
swirl()
?swirl()
swirl()
swirl()
install_from_swirl('Getting_and_Cleaning_Data')
swirl()
?read.csv()
mydf<-read.csv(file=path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion('dplyr')
cran<-tbl_df(mydf)
rm('mydf')
?tbl_df
cran
?select
select(cran,ip_id,package,country)
5:20
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(cran,-time)
select(cran,-5:20)
select(cran,-(5:20)
select(cran,-(5:20))
select(cran,-X:size)
select(cran,-(X:size)
)
select(cran,-X:size)
select(cran,-(X:size))
-5:20
-(5:20)
select(cran,-(X:size))
filter(cran,package=='swirl')
filter(cran,r_version=='3.1.1',country=='US')
?Comparison
filter(cran,r_version<='3.0.2',country=='IN')
filter(cran,country=='US|country=='IN')
filter(cran,country=='US'|country=='IN')
filter(cran,size>100500,r_os=='linux-gnu')
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran,!is.na(r_version))
cran2<-select(cran,size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id))
arrange(cran2,package,ip_id)
arrange(cran2,country,desc(r_version),ip_id)
cran3<-select(cran,c(ip_id,package,size))
cran3<-select(cran,ip_id,package,size)
cran3
mutat(cran3,size_mb=size/2^20)
mutate(cran3,size_mb=size/2^20)
mutate(cran3,size_mb=size/2^20,size_gb=size_mb/2^10)
mutate(cran3,correct_size=size+1000)
summarize(cran,avg_bytes)
summarize(cran,avg_bytes=mean(size))
swirl()
install.packages('swirl')
library(swirl)
swirl()
install_from_swirl('Getting_and_Cleaning_Data')
swirl()
Sys.getlocale('LC_TIME')
library(lubridate)
help(package=lubridate)
today()
this_day<-today()
this_day
year(this_day
)
wday(this_day)
wday(this_day,label=TRUE)
this_moment<-now()
this_moment
second(this_moment)
my_date<-ymd('1989-05-17')
my_date
class(my_date)
ymd('1989 May 17')
mdy('1989 May 17')
mdy('March 12, 1975')
mdy('25081958')
mdy(25081958)
dmy(25081958)
dmy(25081985)
ymd('192012')
ymd('1-9-2012')
ymd('1-2-1920')
mdy('1-2-1920')
ymd('1920/1/2')
dt1
ymd_hms(dt1)
hms('03:22:14')
dt2
ymd(dt2)
update(this_moment,hours=8,minutes=34,seconds=55)
this_moment
?update
this_moment<-update(this_moment,hours=hour(now()),minutes=minute(now()),seconds=second(now()))
this_moment
nyc<-now(tzone='America/New_York')
nyv
nyc
depart<-nyc+days(2)
depart
depart<-update(depart,hours=17,minutes = 34)
depart
arrive<-depart+hours(15)+minutes(50)
?with_tz
arrive<-with_tz(arrive,tzone='Asia/Hong_Kong')
arrive
last_time<-mdy('June 17, 2008',tz = 'Singapore')
last_time
?interval
how_long<-interval(last_time,arrive)
as.period(how_long)
stopwatch()
install.packages('shiny')
?gsub
?sapply
?unique
library(data.table)
data("iris")
iris<-data.table(iris)
iris$Sepal.Length
?geom_point
library(ggplot2)
?geom_point
?lubridate
library(lubridate)
year('2001-1-12')
version
version
install.packages(ggplot2)
install.packages(ggplot)
install.packages("ggplot2")
install.packages(lubridate)
install.packages('lubridate')
install.packages('plotly')
install.packages('leaflet')
install.packages('knitr')
install.packages('caret')
install.packages('data.table')
install.packages('gridExtra')
?addCircels
?addCircles
library(leaflet)
?addCircles
install.packages('pacman')
library(pacman)
if (!require("pacman")) install.packages("pacman")
pacman::p_exists(R)
if (!require("pacman")) install.packages("pacman")
pacman::p_exists(R)
pacman::p_load(animation, rgdal, PBSmodelling, onion, mapview)
?rgdal::project
?getS3method
?getMethod
?getS3method
?show<ethods
?showMethods
?getMethod
library(iris)
data("iris")
library(ggplot2)
library(plotly)
g <- ggplot(data= iris,aes(x=Sepal.Width,y=Sepal.Length,colour=as.factor(Species)))+
geom_point()
ggplotly(g)
g <- ggplot(data= iris,aes(x=Sepal.Width,y=Petal.Width,colour=as.factor(Species)))+
geom_point()+ggtitle('Iris Disparity Based on Sepal Characteristics')
ggplotly(g)
g <- ggplot(data= iris,aes(x=Sepal.Width,y=Petal.Width,colour=as.factor(Species)))+
geom_point()+ggtitle('Iris Disparity Based on Sepal Characteristics')+
theme(legend.title = 'Iris Class')
ggplotly(g)
?labs
g1 <- ggplot(data= iris,aes(x=Sepal.Width,y=Sepal.Length,colour=as.factor(Species)))+
geom_point()+ggtitle('Iris Disparity Based on Sepal Characteristics')+
guides(fill=guide_legend(title=NULL))
ggplotly(g1)
g2 <- ggplot(data= iris,aes(x=Petal.Width,y=Petal.Length,colour=as.factor(Species)))+
geom_point()+ggtitle('Iris Disparity Based on Petal Characteristics')+
guides(fill=guide_legend(title=NULL))
ggplotly(g2)
g1 <- ggplot(data= iris,aes(x=Sepal.Width,y=Sepal.Length,colour=Species))+
geom_point()+ggtitle('Iris Disparity Based on Sepal Characteristics')+
guides(fill=guide_legend(title=NULL))
ggplotly(g1)
g2 <- ggplot(data= iris,aes(x=Petal.Width,y=Petal.Length,colour=Species))+
geom_point()+ggtitle('Iris Disparity Based on Petal Characteristics')+
guides(fill=guide_legend(title=NULL))
ggplotly(g2)
g1 <- ggplot(data= iris,aes(x=Sepal.Width,y=Sepal.Length,colour=Species))+
geom_point()+ggtitle('Iris Disparity Based on Sepal Characteristics')+
guides(fill=guide_legend(title=NULL))
ggplotly(g1)
g2 <- ggplot(data= iris,aes(x=Petal.Width,y=Petal.Length,colour=Species))+
geom_point()+ggtitle('Iris Disparity Based on Petal Characteristics')+
guides(fill=guide_legend(title=NULL))
ggplotly(g2)
install.packages("MultinomialCI")
library(parallel)
?`parallel-package`
detectCores()
?varImp
library(caret)
?varImp
library(randomForest)
?varImp
?randomForest::varImp
getAnywhere(importance)
getAnywhere(importance)
importance
getAnywhere(importance)
getAnywhere(importance)
randomForest:::importance()
randomForest:::importance
randomForest:::.importance
getMethod(importance)
method(importance)
getmethod(importance)
getMethod(importance)
getAnywhere(importance)
getAnywhere(importance.default)
methods(randomForest())
methods(randomForest
)
getAnywhere(randomForest)
getAnywhere(hist())
getAnywhere(hist
)
getAnywhere(importance)
?getAnywhere
help importance
getAnywhere('simpleLoess')
getAnywhere('importance')
getFromNamespace(importance)
getFromNamespace('importance','randomForest')
?nb
library(e1071)
?varImp
?chisq.test
version()
version
install.packages("lubridate")
library(checkpoint)
checkpointArchives()
install.packages('ggplot2')
install.packages("lubridate")
install.packages("lubridate")
install.packages('stringi')
install.packages('lubridate')
install.packages('ggplot2')
install.packages('data.table')
install.packages('caret')
install.packages('knitr')
install.packages('plotly')
install.packages("e1071")
library(ggplot2)
library(data.table)
library(lubridate)
setwd('/Users/Mikey/Documents/ML-Case-Studies/US Police Shooting Fatalities')
dt <- fread('database.csv',sep = ',')
dt[,date:=ymd(date)]
dt[,manner_of_death:=as.factor(manner_of_death)]
dt[,armed:=as.factor(armed)]
dt[,gender:=as.factor(gender)]
dt[,race:=as.factor(race)]
dt[,signs_of_mental_illness:=as.factor(signs_of_mental_illness)]
dt[,threat_level:=as.factor(threat_level)]
dt[,flee:=as.factor(flee)]
dt[,body_camera:=as.factor(body_camera)]
dt[,state:=as.factor(state)]
dt[,YEAR:=year(date)]
summary(dt)
dt[,.N,by = year(date)]
dt_names<-list(names(dt))
dt
names(dt)
ggplot(data = dt, aes(age,fill=as.factor(YEAR)))+
geom_histogram(bins=40)+ facet_grid(.~YEAR) +
scale_fill_discrete(guide=FALSE)
dt[!is.na(age),.(median=as.double(median(age)),SD=sd(age)),by="YEAR"]
?theme
ggplot(data = dt, aes(age,fill=as.factor(YEAR)))+
geom_histogram(bins=40)+ facet_grid(.~YEAR) +
scale_fill_discrete(guide=FALSE)+theme(plot.title = element_text(size = 15))
ggplot(data = dt, aes(age,fill=as.factor(YEAR)))+
geom_histogram(bins=40)+ facet_grid(.~YEAR) +
scale_fill_discrete(guide=FALSE)+theme(plot.title = element_text(size = 20))
ggplot(data = dt, aes(age,fill=as.factor(YEAR)))+
geom_histogram(bins=40)+ facet_grid(.~YEAR) +
scale_fill_discrete(guide=FALSE)+theme(plot.title = element_text(size = rel(2)))
ggplot(data = dt, aes(age,fill=as.factor(YEAR)))+
geom_histogram(bins=40)+ facet_grid(.~YEAR) +
scale_fill_discrete(guide=FALSE)+theme(plot.title = element_text(size = rel(5)))
#Victim Age Distribution each Year
ggplot(data = dt, aes(age,fill=as.factor(YEAR)))+
geom_histogram(bins=40)+ facet_grid(.~YEAR) +
scale_fill_discrete(guide=FALSE)+theme(text = element_text(size = 20))
ggplot(data = dt, aes(age,fill=as.factor(YEAR)))+
geom_histogram(bins=40)+ facet_grid(.~YEAR) +
scale_fill_discrete(guide=FALSE)+theme(text = element_text(size = 15))
ggplot(data = dt, aes(age,fill=as.factor(YEAR)))+
geom_histogram(bins=35)+ facet_grid(.~YEAR) +
scale_fill_discrete(guide=FALSE)+theme(text = element_text(size = 15))
#Police Killings by Race
tbl_race<-table(dt$race)
tbl_race<-tbl_race[order(tbl_race)]
tbl_race.df<-data.frame(tbl_race)
ggplot(data=tbl_race.df, aes(x=Var1,y=Freq))+
geom_bar(stat='identity',fill='red')+
xlab('Race')+ylab('Killings')++theme(text = element_text(size = 15))+
coord_flip()
tbl_race<-table(dt$race)
tbl_race<-tbl_race[order(tbl_race)]
tbl_race.df<-data.frame(tbl_race)
ggplot(data=tbl_race.df, aes(x=Var1,y=Freq))+
geom_bar(stat='identity',fill='red')+
xlab('Race')+ylab('Killings')+theme(text = element_text(size = 15))+
coord_flip()
ggplot(data = dt, aes(age,fill=as.factor(YEAR)))+
geom_histogram(bins=35)+ facet_grid(.~YEAR) +
scale_fill_discrete(guide=FALSE)+theme(text = element_text(size = 15))
ggplot(data=tbl_race.df, aes(x=Var1,y=Freq))+
geom_bar(stat='identity',fill='red')+
xlab('Race')+ylab('Total Killings 2015-2016')+
theme(text = element_text(size = 15))+
coord_flip()
tbl_race
?geom_bar
length(levels(dt$armed))
tbl_armed<- table(dt$armed)
tbl_armed<-tbl_armed[order(tbl_armed)]
top10_armed<-tail(tbl_armed,n=10)
top10_armed.df<-data.frame(top10_armed)
tbl_armed
View(top10_armed)
tbl_armed<- table(dt$armed)
tbl_armed<-tbl_armed[order(tbl_armed)]
top10_armed<-tail(tbl_armed,n=10)
top10_armed.df<-data.frame(top10_armed)
print('Top 10 Armed Statuses Account for ' +
sum(top10_armed)/sum(tbl_armed)*100 + '% of National Occurrences')
tbl_armed<- table(dt$armed)
tbl_armed<-tbl_armed[order(tbl_armed)]
top10_armed<-tail(tbl_armed,n=10)
top10_armed.df<-data.frame(top10_armed)
print('Top 10 Armed Statuses Account for ' +
as.character( sum(top10_armed)/sum(tbl_armed)*100) + '% of National Occurrences')
sum(top10_armed)/sum(tbl_armed)*100
?paste
print(
paste(
c('Top 10 Armed Statuses Account for ' +
as.character(sum(top10_armed)/sum(tbl_armed)*100) +
'% of National Occurrences'
)
)
)
print(
paste(
c('Top 10 Armed Statuses Account for ' ,
as.character(sum(top10_armed)/sum(tbl_armed)*100) ,
'% of National Occurrences'
)
)
)
print(
paste(
'Top 10 Armed Statuses Account for ' ,
as.character(sum(top10_armed)/sum(tbl_armed)*100) ,
'% of National Occurrences'
)
)
print(
paste(
'Top 10 Armed Statuses Account for ' ,
as.character(sum(top10_armed)/sum(tbl_armed)*100) ,
'% of National Occurrences'
),sep = ''
)
print(
paste(
'Top 10 Armed Statuses Account for' ,
as.character(sum(top10_armed)/sum(tbl_armed)*100) ,
'% of National Occurrences'
),sep = ''
)
ggplot(data = top10_armed.df, aes(x=Var1,y=Freq))+geom_bar(stat='identity')+
geom_bar(stat='identity',fill='red')+
xlab('Armed')+ylab('Killings')  +coord_flip()
tbl_state<-table(dt$state)
tbl_state<-tbl_state[order(tbl_state)]
tbl_state.df<-data.frame(tbl_state)
top10_states<-tail(tbl_state,n=10)
top10_states.df<-data.frame(top10_states)
print(
paste(
'Top 10 States Account for' ,
as.character(sum(top10_states)/sum(tbl_state)*100) ,
'% of National Occurrences'
),sep = ''
)
tbl_state<-table(dt$state)
tbl_state<-tbl_state[order(tbl_state)]
tbl_state.df<-data.frame(tbl_state)
top10_states<-tail(tbl_state,n=20)
top10_states.df<-data.frame(top10_states)
print(
paste(
'Top 20 States Account for' ,
as.character(sum(top10_states)/sum(tbl_state)*100) ,
'% of National Occurrences'
),sep = ''
)
tbl_state<-table(dt$state)
tbl_state<-tbl_state[order(tbl_state)]
tbl_state.df<-data.frame(tbl_state)
top10_states<-tail(tbl_state,n=30)
top10_states.df<-data.frame(top10_states)
print(
paste(
'Top 20 States Account for' ,
as.character(sum(top10_states)/sum(tbl_state)*100) ,
'% of National Occurrences'
),sep = ''
)
tbl_state<-table(dt$state)
tbl_state<-tbl_state[order(tbl_state)]
tbl_state.df<-data.frame(tbl_state)
top10_states<-tail(tbl_state,n=40)
top10_states.df<-data.frame(top10_states)
print(
paste(
'Top 20 States Account for' ,
as.character(sum(top10_states)/sum(tbl_state)*100) ,
'% of National Occurrences'
),sep = ''
)
ggplot(data = data.frame(tbl_state),aes(x=Var1,y=Freq))+
geom_bar(stat='identity',fill='red')+coord_flip()+
xlab('State')+ylab('Associated Deaths')
tbl_state<-table(dt$state)
tbl_state<-tbl_state[order(tbl_state)]
tbl_state.df<-data.frame(tbl_state)
top_states<-tail(tbl_state,n=40)
top_states.df<-data.frame(top_states)
print(
paste(
'Top 40 States Account for' ,
as.character(sum(top_states)/sum(tbl_state)*100) ,
'% of National Occurrences'
),sep = ''
)
View(tail(tbl_state))
View(tail(tbl_state,n=40))
print(paste('Median State Deaths by Police Shootings is ', median(tbl_state) ))
?hclust
names(dt)
clust<-hclust(dt[,-c('id','name','date','YEAR')])
?rpart
install.packages('rpart')
library(rpart)
?rpart
?hclust
?dist
d<-dist(dt[,-c('id','name','date','YEAR')])
hc<-hclust(d)
summary(d)
?rpart
?tree
install.packages('pvclust')
library(pvclust)
?dist
fit<-pvclust(dt[,-c('id','name','date','YEAR')])
?kmeans
summary(dt[,-c('id','name','date','YEAR')])
clust<-kmeans(dt[,-c('id','name','date','YEAR','city')])
clust<-kmeans(dt[,-c('id','name','date','YEAR','city')],centers = 50)
summary(dt[,-c('id','name','date','YEAR','city')])
clust<-kmeans(dt[!is.na(age),-c('id','name','date','YEAR','city')],centers = 50)
clust<-kmeans(dt[is.na(age)==FALSE,-c('id','name','date','YEAR','city')],centers = 50)
?rpart
install.packages('ggmap')
?map_data
example("map_data")
?merge
example("map_data")
states <- map_data("state")
arrests <- USArrests
names(arrests) <- tolower(names(arrests))
arrests$region <- tolower(rownames(USArrests))
choro <- merge(states, arrests, sort = FALSE, by = "region")
choro <- choro[order(choro$order), ]
ggplot(choro, aes(long, lat)) +
geom_polygon(aes(group = group, fill = assault)) +
coord_map("albers",  at0 = 45.5, lat1 = 29.5)
ggplot(choro, aes(long, lat)) +
geom_polygon(aes(group = group, fill = assault/murder)) +
coord_map("albers",  at0 = 45.5, lat1 = 29.5)
library(maps)
