?gsub
?sapply
?unique
library(data.table)
data("iris")
iris<-data.table(iris)
iris$Sepal.Length
?geom_point
library(ggplot2)
?geom_point
?lubridate
library(lubridate)
year('2001-1-12')
version
version
install.packages(ggplot2)
install.packages(ggplot)
install.packages("ggplot2")
install.packages(lubridate)
install.packages('lubridate')
install.packages('plotly')
install.packages('leaflet')
install.packages('knitr')
install.packages('caret')
install.packages('data.table')
install.packages('gridExtra')
?addCircels
?addCircles
library(leaflet)
?addCircles
install.packages('pacman')
library(pacman)
if (!require("pacman")) install.packages("pacman")
pacman::p_exists(R)
if (!require("pacman")) install.packages("pacman")
pacman::p_exists(R)
pacman::p_load(animation, rgdal, PBSmodelling, onion, mapview)
?rgdal::project
?getS3method
?getMethod
?getS3method
?show<ethods
?showMethods
?getMethod
library(iris)
data("iris")
library(ggplot2)
library(plotly)
g <- ggplot(data= iris,aes(x=Sepal.Width,y=Sepal.Length,colour=as.factor(Species)))+
geom_point()
ggplotly(g)
g <- ggplot(data= iris,aes(x=Sepal.Width,y=Petal.Width,colour=as.factor(Species)))+
geom_point()+ggtitle('Iris Disparity Based on Sepal Characteristics')
ggplotly(g)
g <- ggplot(data= iris,aes(x=Sepal.Width,y=Petal.Width,colour=as.factor(Species)))+
geom_point()+ggtitle('Iris Disparity Based on Sepal Characteristics')+
theme(legend.title = 'Iris Class')
ggplotly(g)
?labs
g1 <- ggplot(data= iris,aes(x=Sepal.Width,y=Sepal.Length,colour=as.factor(Species)))+
geom_point()+ggtitle('Iris Disparity Based on Sepal Characteristics')+
guides(fill=guide_legend(title=NULL))
ggplotly(g1)
g2 <- ggplot(data= iris,aes(x=Petal.Width,y=Petal.Length,colour=as.factor(Species)))+
geom_point()+ggtitle('Iris Disparity Based on Petal Characteristics')+
guides(fill=guide_legend(title=NULL))
ggplotly(g2)
g1 <- ggplot(data= iris,aes(x=Sepal.Width,y=Sepal.Length,colour=Species))+
geom_point()+ggtitle('Iris Disparity Based on Sepal Characteristics')+
guides(fill=guide_legend(title=NULL))
ggplotly(g1)
g2 <- ggplot(data= iris,aes(x=Petal.Width,y=Petal.Length,colour=Species))+
geom_point()+ggtitle('Iris Disparity Based on Petal Characteristics')+
guides(fill=guide_legend(title=NULL))
ggplotly(g2)
g1 <- ggplot(data= iris,aes(x=Sepal.Width,y=Sepal.Length,colour=Species))+
geom_point()+ggtitle('Iris Disparity Based on Sepal Characteristics')+
guides(fill=guide_legend(title=NULL))
ggplotly(g1)
g2 <- ggplot(data= iris,aes(x=Petal.Width,y=Petal.Length,colour=Species))+
geom_point()+ggtitle('Iris Disparity Based on Petal Characteristics')+
guides(fill=guide_legend(title=NULL))
ggplotly(g2)
install.packages("MultinomialCI")
library(parallel)
?`parallel-package`
detectCores()
?varImp
library(caret)
?varImp
library(randomForest)
?varImp
?randomForest::varImp
getAnywhere(importance)
getAnywhere(importance)
importance
getAnywhere(importance)
getAnywhere(importance)
randomForest:::importance()
randomForest:::importance
randomForest:::.importance
getMethod(importance)
method(importance)
getmethod(importance)
getMethod(importance)
getAnywhere(importance)
getAnywhere(importance.default)
methods(randomForest())
methods(randomForest
)
getAnywhere(randomForest)
getAnywhere(hist())
getAnywhere(hist
)
getAnywhere(importance)
?getAnywhere
help importance
getAnywhere('simpleLoess')
getAnywhere('importance')
getFromNamespace(importance)
getFromNamespace('importance','randomForest')
?nb
library(e1071)
?varImp
?chisq.test
version()
version
install.packages("lubridate")
library(checkpoint)
checkpointArchives()
install.packages('ggplot2')
install.packages("lubridate")
install.packages("lubridate")
install.packages('stringi')
library(caret)
install.packages('glmnet')
library(glmnet)
load('QuickStartExample.RData')
?glmnet
example("glmnet")
glmnet
?glmnet
?lm
?glm
example(glm)
library(gbm)
install.packages('gbm')
install.packages('ada')
library(gbm)
library(ada)
?Ada
?ada
?lda
library(lda)
library(MASS)
?lda
example(lda)
a<-lda(Sp ~ Sepal.L. + Sepal.W. + Petal.L., data = Iris, prior = c(1,
1, 1)/3, subset = train)
plot(a)
install.packages("xgboost")
install
library(e1071)
?svmn
?svm\
?svm
?libsvm
version
version(e1071)
e1071
?kappa
?classAgreement
?na.omit
?choose
install.packages("rmarkdown")
knitr::opts_chunk$set(echo = TRUE)
path <-'/Users/Mikey/Documents/ML-Case-Studies/Glass'
filename<-'glass.csv'
setwd(path)
DT<-fread(filename)
options(warn = -1)
library(data.table)
library(ggplot2)
library(e1071)
library(MASS)
library(caret)
library(glmnet)
path <-'/Users/Mikey/Documents/ML-Case-Studies/Glass'
filename<-'glass.csv'
setwd(path)
DT<-fread(filename)
DT[,Type:=as.factor(Type)]
summary(DT)
print('# of Each Class')
DT[,.N,by=Type]
#Processing: OMIT ANY Type 6 Glass (Minor Cross-Over with Groups 1[1],2[3],3[1])
DT.omit6 <- DT[!((K==0)&(Fe==0)&(Ba==0))]
DT.omit6[,.N,by=Type]
#Remove Barium Outliers
#(Ba>2)
#(Type=='1')&(Ba>0.5)
#Remove K Outliers
type5.avg.K<-mean(DT.omit6[Type=='5']$K)
type5.sd.K<-sd(DT.omit6[Type=='5']$K)
thresh.type5.sd.K<-type5.avg.K+2*sd(DT.omit6[Type=='5']$K)
#(K>thresh.type5.sd.K)&(Type==5)
DT.clean<-DT.omit6[!((Ba>2)|(Type=='1')&(Ba>0.5)|(K>thresh.type5.sd.K)&(Type==5) )]
DT.clean[,.N,by=Type]
lda.fit<-lda(Type~.,data = DT.clean)
lda.fit
lda.fit$svd
DT.lda<-as.matrix(DT.clean[,-c('Type'),with=FALSE])
DT.lda<- DT.lda %*% lda.fit$scaling
DF.lda<-data.frame(DT.lda,DT.clean$Type)
names(DF.lda)<-c( "LD1"     ,      "LD2"     ,      "LD3"     ,      "LD4"         ,  "Type")
PCA<-prcomp(x=DT.clean[,-c('Type'),with=FALSE])
DT.pca<-as.matrix(DT.clean[,-c('Type'),with=FALSE])
DT.pca<- DT.pca %*% PCA$rotation
DF.pca<-data.frame(DT.pca,DT.clean$Type)
DT.feat<-data.table(DT.clean)
pca.2<-PCA$rotation[,2]
DT.feat[,F1:=RI*pca.2[1] +Na*pca.2[2] +Mg*pca.2[3] +Al*pca.2[4] +Si*pca.2[5] +K*pca.2[6] +Ca*pca.2[7] +Ba*pca.2[8] +Fe*pca.2[9]]
sims<-matrix(nrow=10000,ncol=50)
quant<-vector(mode='numeric',length=10000)
samps.sin7<- DT.clean[(Type!='7')]$Ba
for(i in 1:10000){
sims[i,]<-sample(x=samps.sin7, size=50,replace=TRUE)
quant[i]<-quantile(sims[i,],probs=0.95)
}
Ba.Thresh<-mean(quant)
Ba.type7.mean<-mean(DT.feat[Type=='7']$Ba)
DT.feat[,F2:=ifelse(Ba>Ba.Thresh,exp(3.25/(abs(Ba-Ba.type7.mean)^1.7+Ba.type7.mean)),Ba)]
pca.3<-PCA$rotation[,3]
DT.feat[,F3:=RI*pca.3[1] +Na*pca.3[2] +Mg*pca.3[3] +Al*pca.3[4] +Si*pca.3[5] +K*pca.3[6] +Ca*pca.3[7] +Ba*pca.3[8] +Fe*pca.3[9]]
ld.2<-lda.fit$scaling[,2]
DT.feat[,F4:=RI*ld.2[1] +Na*ld.2[2] +Mg*ld.2[3] +Al*ld.2[4] +Si*ld.2[5] +K*ld.2[6] +Ca*ld.2[7] +Ba*ld.2[8] +Fe*ld.2[9]]
pca.9<-PCA$rotation[,9]
DT.feat[,F5:=RI*pca.9[1] +Na*pca.9[2] +Mg*pca.9[3] +Al*pca.9[4] +Si*pca.9[5] +K*pca.9[6] +Ca*pca.9[7] +Ba*pca.9[8] +Fe*pca.9[9]]
pca.1<-PCA$rotation[,1]
DT.feat[,F7:=RI*pca.1[1] +Na*pca.1[2] +Mg*pca.1[3] +Al*pca.1[4] +Si*pca.1[5] +K*pca.1[6] +Ca*pca.1[7] +Ba*pca.1[8] +Fe*pca.1[9]]
ld.1<-lda.fit$scaling[,1]
DT.feat[,F8:=RI*ld.1[1] +Na*ld.1[2] +Mg*ld.1[3] +Al*ld.1[4] +Si*ld.1[5] +K*ld.1[6] +Ca*ld.1[7] +Ba*ld.1[8] +Fe*ld.1[9]]
sims<-matrix(nrow=10000,ncol=50)
quant<-vector(mode='numeric',length=10000)
samps<- DT.clean[(Type!='7')&(Type!='5')]$Mg
for(i in 1:10000){
sims[i,]<-sample(samps, size=50,replace=TRUE)
quant[i]<-quantile(sims[i,],probs=0.25)
}
F9_Thresh<-mean(quant)
DT.feat[,F9:=ifelse(Mg>=F9_Thresh,(Mg-F9_Thresh)^2,0)]
DT.feat[,group:=ifelse(Type=='7','7',ifelse(Type=='5','5','123'))]
DT.feat[,RI:=NULL]
DT.feat[,Na:=NULL]
DT.feat[,Mg:=NULL]
DT.feat[,Al:=NULL]
DT.feat[,Si:=NULL]
DT.feat[,K:=NULL]
DT.feat[,Ca:=NULL]
DT.feat[,Ba:=NULL]
DT.feat[,Fe:=NULL]
lda.feat<-lda(group~.,data = DT.feat[,-c('Type'),with=FALSE])
lda.feat
lda.feat$svd
mat.lda.feat<-as.matrix(DT.feat[,-c('group','Type'),with=FALSE])
mat.lda.feat<- mat.lda.feat %*% lda.feat$scaling
DF.lda.feat<-data.frame(mat.lda.feat,DT.feat$group)
names(DF.lda.feat)<-c('LD1','LD2','group')
PCA.feat<-prcomp(x=DT.feat[,-c('group','Type'),with=FALSE])
mat.pca.feat<-as.matrix(DT.feat[,-c('group','Type'),with=FALSE])
mat.pca.feat<- mat.pca.feat %*% PCA.feat$rotation
DF.pca.feat<-data.frame(mat.pca.feat,DT.feat$group)
summary(PCA.feat)
DT123.clean<-DT.clean[(Type=='1')|(Type=='2')|(Type=='3')]
ggplot(data = DT123.clean, aes(x=RI,fill=as.factor(Type)))+geom_density(alpha=0.25)
ggplot(data = DT123.clean, aes(x=Na,fill=as.factor(Type)))+geom_density(alpha=0.25)
ggplot(data = DT123.clean, aes(x=Mg,fill=as.factor(Type)))+geom_density(alpha=0.25)
ggplot(data = DT123.clean, aes(x=Al,fill=as.factor(Type)))+geom_density(alpha=0.25) #Maybe 1 & 3
ggplot(data = DT123.clean, aes(x=Si,fill=as.factor(Type)))+geom_density(alpha=0.25)
ggplot(data = DT123.clean, aes(x=K,fill=as.factor(Type)))+geom_density(alpha=0.25)
ggplot(data = DT123.clean, aes(x=Ca,fill=as.factor(Type)))+geom_density(alpha=0.25)
ggplot(data = DT123.clean, aes(x=Ba,fill=as.factor(Type)))+geom_density(alpha=0.25)
ggplot(data = DT123.clean, aes(x=Fe,fill=as.factor(Type)))+geom_density(alpha=0.25)
DT123.feat<-DT.feat[(Type=='1')|(Type=='2')|(Type=='3')]
ggplot(data = DT123.feat, aes(x=F1,fill=as.factor(Type)))+geom_density(alpha=0.25)
ggplot(data = DT123.feat, aes(x=F2,fill=as.factor(Type)))+geom_density(alpha=0.25)
ggplot(data = DT123.feat, aes(x=F3,fill=as.factor(Type)))+geom_density(alpha=0.25)
ggplot(data = DT123.feat, aes(x=F4,fill=as.factor(Type)))+geom_density(alpha=0.25)
ggplot(data = DT123.feat, aes(x=F5,fill=as.factor(Type)))+geom_density(alpha=0.25)
ggplot(data = DT123.feat, aes(x=F7,fill=as.factor(Type)))+geom_density(alpha=0.25)
ggplot(data = DT123.feat, aes(x=F8,fill=as.factor(Type)))+geom_density(alpha=0.25)
install.packages('gmb')
install.packages('gbm')
library(gbm)
names(DT.feat)
DT.gbm<-data.table(DF.lda.feat,DF.pca.feat$PC1,DF.pca.feat$PC2,DT.feat$group)
names(DT.gbm)
DT.gbm<-data.table(DF.lda.feat,DF.pca.feat$PC1,DF.pca.feat$PC2)
names(DT.gbm)
setnames(DT.gbm,new=c('LD1','LD2','group','PC1','PC2'))
?setnames
setnames(DT.gbm,old=names(DT.gbm),new=c('LD1','LD2','group','PC1','PC2'))
?createDataPartition
DT.gbm<-data.table(DF.lda.feat,DF.pca.feat$PC1,DF.pca.feat$PC2)
setnames(DT.gbm,old=names(DT.gbm),new=c('LD1','LD2','group','PC1','PC2'))
# define training control
train_control<- trainControl(method="cv", number=10)
# train the model
gbm.fit<- train(group~., data=DT.gbm, trControl=train_control, method="gbm")
plot(gbm.fit)
summary(gbm.fit)
gbm.fit
?varImp
gbm.fit
plot(gbm.fit)
summary(gbm.fit)
dim(gbm.fit$pred)
dim(gbm.fit$results)
train_control<- trainControl(method="cv", number=15)
# train the model
gbm.fit<- train(group~., data=DT.gbm, trControl=train_control, method="gbm")
gbm.fit
dim(DT.gbm)
plot(gbm.fit)
# define training control
train_control<- trainControl(method="cv", number=15)
# train the model
set.seed(123)
gbm.fit<- train(group~., data=DT.gbm, trControl=train_control, method="gbm")
plot(gbm.fit)
train_control<- trainControl(method="cv", number=10)
# train the model
set.seed(123)
gbm.fit<- train(group~., data=DT.gbm, trControl=train_control, method="gbm")
plot(gbm.fit)
dim(DT.gbm)
train_control<- trainControl(method="cv", number=12)
# train the model
set.seed(123)
gbm.fit<- train(group~., data=DT.gbm, trControl=train_control, method="gbm")
plot(gbm.fit)
198/12
train_control<- trainControl(method="cv", number=13)
# train the model
set.seed(123)
gbm.fit<- train(group~., data=DT.gbm, trControl=train_control, method="gbm")
plot(gbm.fit)
train_control<- trainControl(method="cv", number=14)
# train the model
set.seed(123)
gbm.fit<- train(group~., data=DT.gbm, trControl=train_control, method="gbm")
gbm.fit
plot(gbm.fit)
1988/14
198/14
train_control<- trainControl(method="cv", number=(nrow(DT.gbm)-1))
# train the model
set.seed(123)
gbm.fit<- train(group~., data=DT.gbm, trControl=train_control, method="gbm")
plot(gbm.fit)
gbm.fit
confusionMatrix(predict(gbm.fit$finalModel,DT.gbm),DT.gbm$group)
confusionMatrix(predict(gbm.fit,DT.gbm),DT.gbm$group)
gbm.fit
plot(gbm.fit)
summary(gbm.fit)
confusionMatrix(predict(gbm.fit,DT.gbm),DT.gbm$group)
gbm.fit
gbm.fit
plot(gbm.fit)
summary(gbm.fit)
confusionMatrix(predict(gbm.fit,DT.gbm),DT.gbm$group)
train_controlB<- trainControl(method="cv", number=(10))
gbm.fit<- train(group~., data=DT.gbm, trControl=train_controlB, method="gbm")
gbm.fit
plot(gbm.fit)
summary(gbm.fit)
confusionMatrix(predict(gbm.fit,DT.gbm),DT.gbm$group)
train_controlA<- trainControl(method="LOOCV")
set.seed(123)
gbm.fit<- train(group~., data=DT.gbm, trControl=train_controlA, method="gbm")
gbm.fit
confusionMatrix(predict(gbm.fit,DT.gbm),DT.gbm$group)
plot(gbm.fit)
gbm.fit
size(DT.gbm)
dim(DT.gbm)
gbm.fit
plot(gbm.fit)
summary(gbm.fit)
confusionMatrix(predict(gbm.fit,DT.gbm),DT.gbm$group)
# train the model
set.seed(123)
gbm.fit<- train(group~., data=DT.gbm, trControl=train_controlB, method="gbm")
gbm.fit
plot(gbm.fit)
summary(gbm.fit)
confusionMatrix(predict(gbm.fit,DT.gbm),DT.gbm$group)
train_controlB<- trainControl(method="cv", number=(9))
set.seed(123)
gbm.fit<- train(group~., data=DT.gbm, trControl=train_controlB, method="gbm")
gbm.fit
plot(gbm.fit)
summary(gbm.fit)
confusionMatrix(predict(gbm.fit,DT.gbm),DT.gbm$group)
confusionMatrix(predict(gbm.fit,DT.gbm),DT.gbm$group)
train_controlB<- trainControl(method="cv", number=(8))
# train the model
set.seed(123)
gbm.fit<- train(group~., data=DT.gbm, trControl=train_controlB, method="gbm")
gbm.fit
plot(gbm.fit)
summary(gbm.fit)
confusionMatrix(predict(gbm.fit,DT.gbm),DT.gbm$group)
train_controlB<- trainControl(method="cv", number=(7))
# train the model
set.seed(123)
gbm.fit<- train(group~., data=DT.gbm, trControl=train_controlB, method="gbm")
gbm.fit
plot(gbm.fit)
summary(gbm.fit)
confusionMatrix(predict(gbm.fit,DT.gbm),DT.gbm$group)
train_controlB<- trainControl(method="cv", number=(5))
# train the model
set.seed(123)
gbm.fit<- train(group~., data=DT.gbm, trControl=train_controlB, method="gbm")
gbm.fit
plot(gbm.fit)
summary(gbm.fit)
confusionMatrix(predict(gbm.fit,DT.gbm),DT.gbm$group)
194/5
lda.feat$scaling
DT.gbm123<-data.table(DF.lda.feat,DF.pca.feat$PC1,DF.pca.feat$PC2)
names(DT.gbm123)
DT123.clean<-DT.clean[(Type=='1')|(Type=='2')|(Type=='3')]
# define training control
train_controlA<- trainControl(method="LOOCV")
train_controlB<- trainControl(method="cv", number=(10))
# train the model
set.seed(123)
gbm.fit123<- train(Type~., data=DT123.clean, trControl=train_controlB, method="gbm")
DT123.clean<-DT.clean[(Type=='1')|(Type=='2')|(Type=='3')]
set.seed(123)
gbm.fit123<- train(Type~., data=DT123.clean, trControl=train_controlB, method="gbm")
summary(DT123.clean)
?setlevels
?set.levels
DT123.clean<-DT.clean[(Type=='1')|(Type=='2')|(Type=='3')]
DT123.clean<-data.table(DT.clean[(Type=='1')|(Type=='2')|(Type=='3')])
set.seed(123)
gbm.fit123<- train(Type~., data=DT123.clean, trControl=train_controlB, method="gbm")
summary(DT123.clean)
levels(DT123.clean$Type)
?setattr
DT123.clean<-data.table(DT.clean[(Type=='1')|(Type=='2')|(Type=='3')])
setattr(DT123.clean$Type,"levels",c('1','2','3'))
summary(DT123.clean)
train_controlA<- trainControl(method="LOOCV")
train_controlB<- trainControl(method="cv", number=(10))
# train the model
set.seed(123)
gbm.fit123<- train(Type~., data=DT123.clean, trControl=train_controlB, method="gbm")
gbm.fit123
plot(gbm.fit123)
summary(gbm.fit123)
confusionMatrix(predict(gbm.fit123,DT.gbm123),DT.gbm123$Type)
gbm.fit123
plot(gbm.fit123)
summary(gbm.fit123)
confusionMatrix(predict(gbm.fit123,DT123.clean),DT123.clean)
gbm.fit123
plot(gbm.fit123)
summary(gbm.fit123)
confusionMatrix(predict(gbm.fit123,DT123.clean),DT123.clean$Type)
summary(DT123.clean)
# train the model
set.seed(123)
gbm.fit123<- train(Type~., data=DT123.clean, trControl=train_controlA, method="gbm")
gbm.fit123
plot(gbm.fit123)
summary(gbm.fit123)
confusionMatrix(predict(gbm.fit123,DT123.clean),DT123.clean$Type)
et.seed(123)
set.seed(123)
gbm.fit123<- train(Type~.-Ba, data=DT123.clean, trControl=train_controlA, method="gbm")
gbm.fit123
plot(gbm.fit123)
summary(gbm.fit123)
confusionMatrix(predict(gbm.fit123,DT123.clean),DT123.clean$Type)
library('rjson')
library(data.table)
library(ggplot2)
setwd('/Users/Mikey/Documents/ML-Case-Studies/Credit Card Fraud Detection')
list.files()
mydata<-fread('creditcard.csv', sep=',')
summary(mydata)
levels(as.factor(mydata$Class))
knitr::opts_chunk$set(echo = TRUE)
ggplot(data = mydata, aes(x = Amount,fill = as.factor(Class)))+geom_density(alpha=.25)
ggplot(data = mydata, aes(x = Amount))+geom_density(alpha=.25)
ggplot(data = mydata, aes(x = Amount))+geom_boxplot()
ggplot(data = mydata, aes(y = Amount))+geom_boxplot()
ggplot(data = mydata, aes(x = Amount,y = as.factor(Class)))+geom_boxplot()
ggplot(data = mydata, aes(x = Amount,y = as.factor(Class),fill=as.factor(Class)))+geom_violin()
ggplot(data = mydata, aes(y = Amount,x = as.factor(Class),fill=as.factor(Class)))+geom_violin()
library(GGally)
ggpairs(mydata)
ggplot(data = mydata, aes(y = Amount,fill=as.factor(Class)))+geom_violin()+facet_grid(Amount~.)
ggplot(data = mydata, aes(y = Amount,fill=as.factor(Class)))+geom_point()+facet_grid(Amount~.)
ggplot(data = mydata, aes(y = Amount))+geom_point()+facet_grid(Amount~.)
facet_grid
?facet_grid
